<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>

	<arg name="output" default="log" />

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="$(arg output)">

		<param name="resolution" value="0.01" />
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		<param name="height_map" value="false" />
		<param name="colored_map" value="true" />
		<param name="filter_ground" value="false" />
		<param name="candidate_integration" value="true" />
		
		<!-- data source to integrate (PointCloud2) -->
		<!-- <remap from="cloud_in" to="/candidate_point_clouds" /> -->
	
	</node>
</launch>