#!/usr/bin/env python

import rospy
import roslaunch
import rospkg

import os, errno
import os.path

from std_srvs.srv import Empty
from geometry_msgs.msg import PointStamped

class Experiments:
  def __init__(self, launch):
      self.restart = False
      
  def start_experiment(self, req):         
      empty = Empty()            
      self.restart = True      
      return empty

if __name__ == "__main__":
    rospy.init_node('experiments_server')
   
    
    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
    roslaunch.configure_logging(uuid)
   
    rospack = rospkg.RosPack()
   
    description = rospack.get_path('p3dx_description')
    evaluation = rospack.get_path('evaluation')
    
    try:
      os.makedirs(evaluation+"/statistics")
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    if not os.path.isfile(evaluation+"/statistics/experiment"):
      experiment_file = open(evaluation+"/statistics/experiment", 'w')
      experiment_file.write("method,world,cheat_mode,min_certainty,nbv_count,nof_candidates,nof_objects,time, inf_obstacle, inf_obstacle_unexplored, inf_object, inf_object_unexplored, inf_unexplored,IoU_threshold,recall,precision,tp,fp,fn" + '\n')#,recall_ch,precision_ch,tp_ch,fp_ch,fn_ch"+ '\n')
      experiment_file.close()
      
    if not os.path.isfile(evaluation+"/temp"):  
      setup_file = open(evaluation+"/experiment_setup", 'r')  
      temp_file = open(evaluation+"/temp", 'w')  
      count = 0
      for line in setup_file:
        if count != 0:
          line = line.replace(" ", "")
          line = line.replace("\n", "")
          split = line.split(",")
          method = split[0]
          repeats = int(split[1])
          time = float(split[2])
          world = split[3]
          cheat_mode = split[4]
          min_certainty = int(split[5])
          inf_obstacle = float(split[6])
          inf_obstacle_unexplored = float(split[7])
          inf_object = float(split[8])
          inf_object_unexplored = float(split[9])
          inf_unexplored = float(split[10]) 
          temp_file.write(method+","+str(repeats)+","+str(time)+","+world+","+cheat_mode+","+str(min_certainty)+","+str(inf_obstacle)+","+str(inf_obstacle_unexplored)+","+str(inf_object)+","+str(inf_object_unexplored)+","+str(inf_unexplored)+"\n")
        count += 1
      setup_file.close()
      temp_file.close()
      
    temp_file = open(evaluation+"/temp", 'r')
    lines = []
    first = True
    for line in temp_file:
      lines.append(line)
      if first:
        first = False
        line = line.replace(" ", "")
        line = line.replace("\n", "")
        split = line.split(",")
        method = split[0]
        repeats = int(split[1])
        time = float(split[2])
        world = split[3]
        cheat_mode = split[4]
        min_certainty = int(split[5])
        inf_obstacle = float(split[6])
        inf_obstacle_unexplored = float(split[7])
        inf_object = float(split[8])
        inf_object_unexplored = float(split[9])
        inf_unexplored = float(split[10]) 
    temp_file.close()
    
    temp_file = open(evaluation+"/temp", 'w')
    first = True
    remove = False
    for line in lines:
      if first:
        first = False
        repeats = repeats - 1
        if repeats != 0:          
          temp_file.write(method+","+str(repeats)+","+str(time)+","+world+","+cheat_mode+","+str(min_certainty)+","+str(inf_obstacle)+","+str(inf_obstacle_unexplored)+","+str(inf_object)+","+str(inf_object_unexplored)+","+str(inf_unexplored)+"\n")
        elif len(lines) == 1:
          remove = True
      else:
        temp_file.write(line)
    temp_file.close()
    
    if remove:
      os.remove(evaluation+"/temp")
    
    lines = []
    everything_file = open(description+"/launch/everything.launch", 'r')
    for line in everything_file:
      lines.append(line)
    everything_file.close()
    everything_file = open(description+"/launch/everything.launch", 'w')
    for line in lines:
      if "<arg name=\"method\" default=" in line:
        everything_file.write("  <arg name=\"method\" default=\""+method+"\" />\n")
      elif "<arg name=\"world\" default=" in line:
        everything_file.write("  <arg name=\"world\" default=\""+world+"\" />\n")
      elif "<arg name=\"cheat_mode\" default=" in line:
        everything_file.write("  <arg name=\"cheat_mode\" default=\""+cheat_mode+"\" />\n")
      elif "<arg name=\"min_certainty\" default=" in line:
        everything_file.write("  <arg name=\"min_certainty\" default=\""+str(min_certainty)+"\" />\n")
      elif "<arg name=\"available_time\" default=" in line:
        everything_file.write("  <arg name=\"available_time\" default=\""+str(time)+"\" />\n")
      elif "<arg name=\"inf_obstacle\" default=" in line:
        everything_file.write("  <arg name=\"inf_obstacle\" default=\""+str(inf_obstacle)+"\" />\n")
      elif "<arg name=\"inf_obstacle_unexplored\" default=" in line:
        everything_file.write("  <arg name=\"inf_obstacle_unexplored\" default=\""+str(inf_obstacle_unexplored)+"\" />\n")
      elif "<arg name=\"inf_object\" default=" in line:
        everything_file.write("  <arg name=\"inf_object\" default=\""+str(inf_object)+"\" />\n")
      elif "<arg name=\"inf_object_unexplored\" default=" in line:
        everything_file.write("  <arg name=\"inf_object_unexplored\" default=\""+str(inf_object_unexplored)+"\" />\n")
      elif "<arg name=\"inf_unexplored\" default=" in line:
        everything_file.write("  <arg name=\"inf_unexplored\" default=\""+str(inf_unexplored)+"\" />\n")
      else:
        everything_file.write(line)
    everything_file.close()
      
    launch = roslaunch.parent.ROSLaunchParent(uuid, [description+"/launch/everything.launch"])
    launch.start()   
      
    experiment = Experiments(launch)
    s = rospy.Service('restarter', Empty, experiment.start_experiment)     
    
    rospy.wait_for_service("/explore_server/explore_costmap/explore_boundary/get_next_frontier", timeout=None)
    rospy.sleep(3)
    rospy.loginfo("System is ready, exploration boundaries will be published")
    
    pub = rospy.Publisher('/clicked_point', PointStamped, queue_size=10)
    point = PointStamped()
    point.header.frame_id = "map"
    point.point.x = 3.6
    point.point.y = 3.2
    point.point.z = 0
    pub.publish(point)
    rospy.sleep(1)
    pub.publish(point)
    rospy.sleep(1)
    point.point.y = -3.4
    pub.publish(point)
    rospy.sleep(1)
    point.point.x = -3.3
    point.point.y = -3.34
    pub.publish(point)
    rospy.sleep(1)
    point.point.x = -3.3
    point.point.y = 3.2
    pub.publish(point)
    rospy.sleep(1)
    point.point.x = 3.6
    point.point.y = 3.2
    pub.publish(point)
    rospy.sleep(1)
    point.point.x = 0
    point.point.y = 0
    pub.publish(point)
    rospy.sleep(1) 
    
    start = rospy.Time.now()
    # restart if node is shutdown, restart service is used or time is over
    while not rospy.is_shutdown() and not experiment.restart and (rospy.Time.now() - start).to_sec() < time+420:
      #print str((rospy.Time.now() - start).to_sec())
      continue
    
    if (rospy.Time.now() - start).to_sec() >= time+420:
      rospy.loginfo("System restart, because time is up")
    elif experiment.restart:
      rospy.loginfo("System restart, because evaluation is done")
    else:
      rospy.loginfo("System restart, because of manual restart")
      
      
    #rospy.spin()
    

